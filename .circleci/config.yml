goModCacheKey: &goModCacheKey 'rox-go-binary-pkg-mod-v2-{{ checksum "go.sum" }}'
restoreGoModCache: &restoreGoModCache
  restore_cache:
    name: Restore Go module cache
    keys:
      - *goModCacheKey

saveGoModCache: &saveGoModCache
  save_cache:
    name: Saving Go module cache
    key: *goModCacheKey
    paths:
      - /home/circleci/go/pkg/mod

restoreGoBuildCache: &restoreGoBuildCache
  restore_cache:
    name: Restoring Go build cache
    keys:
      - go-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
      - go-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-
      - go-cache-v1-{{ .Environment.CIRCLE_JOB }}-master-
      - go-cache-v1-{{ .Environment.CIRCLE_JOB }}-
      - go-cache-v1-

saveGoBuildCache: &saveGoBuildCache
  save_cache:
    name: Saving Go build cache
    key: go-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - /home/circleci/.cache/go-build

orbs:
  win: circleci/windows@2.4.0

executors:
  custom:
    docker:
      - image: cimg/go:1.17.8
    working_directory: /home/circleci/kube-linter

runOnAllTags: &runOnAllTags
  filters:
    tags:
      only: /.*/

version: 2.1

jobs:
  build:
    executor: custom
    steps:
    - checkout
    - *restoreGoBuildCache
    - *restoreGoModCache
    - run:
        name: Build binaries
        command: |
          make build

    - check-binary-version-match

    - run:
        name: Create a GitHub release, if on tag.
        command: |
          [[ -n "${CIRCLE_TAG}" ]] || exit 0

          wget --quiet https://github.com/gruntwork-io/fetch/releases/download/v0.3.5/fetch_linux_amd64
          sudo install fetch_linux_amd64 /usr/bin/fetch
          ghr_version="v0.13.0"
          fetch --repo="https://github.com/tcnksm/ghr" --tag="${ghr_version}" --release-asset="ghr_${ghr_version}_linux_amd64.tar.gz" .
          tar -zxvf ghr_${ghr_version}_linux_amd64.tar.gz
          sudo install ghr_${ghr_version}_linux_amd64/ghr /usr/bin/ghr
          which ghr
          ./scripts/create_github_release.sh "${CIRCLE_TAG}" ./bin

    - store_artifacts:
        path: bin

    - persist_to_workspace:
        root: /home/circleci/kube-linter
        paths:
          - .gobin/kube-linter
          - bin/windows/kube-linter.exe

  e2e-test:
    executor: custom
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/kube-linter

      - run:
          name: Run E2E tests
          command: |
            make e2e-test

  image:
    executor: custom
    steps:
    - checkout
    - check-label-to-run:
        label: push-docker-image 
    - setup_remote_docker
    
    - run:
        name: Build image
        command: |
          make image

    - check-binary-version-match
    - check-image-version-match

    - run:
        name: Push image to DockerHub, if applicable.
        command: |
          if [[ -z "${DOCKER_IO_PUSH_USERNAME}" && -z "${DOCKER_IO_PUSH_PASSWORD}" ]]; then
            echo "DockerHub creds not found. This is unexpected and hence not pushing."
            exit 1
          fi
          docker login -u "$DOCKER_IO_PUSH_USERNAME" -p "$DOCKER_IO_PUSH_PASSWORD"
          img="stackrox/kube-linter:$(./get-tag)"
          alpine_img="${img}-alpine"
          docker push "${img}"
          docker push "${alpine_img}"

          if [[ -n "${CIRCLE_TAG}" ]]; then
            docker tag "${img}" stackrox/kube-linter:latest
            docker push stackrox/kube-linter:latest
            docker tag "${alpine_img}" stackrox/kube-linter:latest-alpine
            docker push stackrox/kube-linter:latest-alpine
          fi

commands:
  check-label-to-run:
    description: Run on main or tags, but skip on PRs unless the given label is provided
    parameters:
      label:
        type: string
    steps:
      - run:
          name: Determine whether to run step
          command: |
            set +e
            if [[ "${CIRCLE_BRANCH}" == "main" || -n "${CIRCLE_TAG}" ]]; then
              echo "On main or tag, running the step"
            else
              .circleci/pr_has_label.sh "<< parameters.label >>"
              if [[ $? -eq 1 ]]; then
                echo "Skipping step because we're on a PR. Apply the << parameters.label >> label to your PR if you want to run them."
                circleci step halt
              fi
              [[ $? -eq 0 ]]
            fi

  check-binary-version-match:
    description: Check the built binary matches with the expected version
    steps:
      - run:
          name: Verify the binary version
          command: |
            expected_version="$(./get-tag)"
            version_from_binary="$(.gobin/kube-linter version)"
            echo "Version from kube-linter binary: ${version_from_binary}. Expected version: ${expected_version}"
            [[ "${version_from_binary}" == "${expected_version}" ]]
  
  check-image-version-match:
    description: Check the built image matches with the expected version
    steps:
      - run:
          name: Verify the image version
          command: |
            expected_version="$(./get-tag)"
            version_from_image="$(docker run "stackrox/kube-linter:${expected_version}" version)"
            echo "Version from image: ${version_from_image}. Expected version: ${expected_version}"
            [[ "${version_from_image}" == "${expected_version}" ]]

workflows:
  version: 2
  build:
    jobs:
    - build:
        <<: *runOnAllTags
    - image:
        <<: *runOnAllTags
        context: docker-io-push
