// Code generated by kube-linter template codegen. DO NOT EDIT.
// +build !templatecodegen

package params

import (
	"github.com/pkg/errors"
	"golang.stackrox.io/kube-linter/internal/check"
	"golang.stackrox.io/kube-linter/internal/templates/util"
)

var (
	// Use this in case it doesn't get used otherwise.
	_ = util.MustParseParameterDesc


	groupParamDesc = util.MustParseParameterDesc(`{
	"Name": "group",
	"Type": "string",
	"Description": "The disallowed object group.",
	"Examples": [
		"apps"
	],
	"SubParameters": null,
	"Required": false,
	"NoRegex": false,
	"NotNegatable": false,
	"XXXStructFieldName": "Group"
}
`)
	versionParamDesc = util.MustParseParameterDesc(`{
	"Name": "version",
	"Type": "string",
	"Description": "The disallowed object API version.",
	"Examples": [
		"v1",
		"v1beta1"
	],
	"SubParameters": null,
	"Required": false,
	"NoRegex": false,
	"NotNegatable": false,
	"XXXStructFieldName": "Version"
}
`)
	kindParamDesc = util.MustParseParameterDesc(`{
	"Name": "kind",
	"Type": "string",
	"Description": "The disallowed kind.",
	"Examples": [
		"Deployment",
		"DaemonSet"
	],
	"SubParameters": null,
	"Required": false,
	"NoRegex": false,
	"NotNegatable": false,
	"XXXStructFieldName": "Kind"
}
`)

	ParamDescs = []check.ParameterDesc{
		groupParamDesc,
		versionParamDesc,
		kindParamDesc,
	}
)

func (p *Params) Validate() error {
	var missingRequiredParams []string
	if len(missingRequiredParams) > 0 {
		return errors.Errorf("required params %v not found", missingRequiredParams)
    }
	return nil
}

// ParseAndValidate instantiates a Params object out of the passed map[string]interface{},
// validates it, and returns it.
// The return type is interface{} to satisfy the type in the Template struct.
func ParseAndValidate(m map[string]interface{}) (interface{}, error) {
	var p Params
	if err := util.DecodeMapStructure(m, &p); err != nil {
		return nil, err
	}
	if err := p.Validate(); err != nil {
		return nil, err
	}
	return p, nil
}

// WrapInstantiateFunc is a convenience wrapper that wraps an untyped instantiate function
// into a typed one.
func WrapInstantiateFunc(f func(p Params) (check.Func, error)) func (interface{}) (check.Func, error) {
	return func(paramsInt interface{}) (check.Func, error) {
		return f(paramsInt.(Params))
	}
}
